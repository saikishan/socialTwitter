angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(e,n){o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({username:"kishan",body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})},o.fetch().success(function(o){t.posts=o})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,o){t.register=function(t,e){o.register(t,e)}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}),t.when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}),t.when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}),o.html5Mode(!0)}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.register=function(o,e){return console.log(o),t.post("/api/users",{username:o,password:e})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJodG1sNU1vZGUiLCJzdmMiLCJnZXRVc2VyIiwidmFsIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxPQ0hBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsWUNMQWYsUUFBQUMsT0FBQSxPQUFBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFhLEdBQ0FiLEVBQUFjLFFBQUEsV0FDQWQsRUFBQWUsVUFDQUYsRUFBQUcsUUFDQVQsU0FBQSxTQUNBVSxLQUFBakIsRUFBQWUsV0FDQUcsUUFBQSxTQUFBQyxHQUNBbkIsRUFBQW9CLE1BQUFDLFFBQUFGLEdBQ0FuQixFQUFBZSxTQUFBLFFBSUFGLEVBQUFTLFFBQUFKLFFBQUEsU0FBQUUsR0FDQXBCLEVBQUFvQixNQUFBQSxPQ2JBdkIsUUFBQUMsT0FBQSxPQUFBeUIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQUgsTUFBQSxXQUNBLE9BQUFFLEVBQUFFLElBQUEsZUFFQUQsS0FBQVQsT0FBQSxTQUFBRyxHQUNBLE9BQUFLLEVBQUFMLEtBQUEsYUFBQUEsT0NMQXRCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxnQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQTJCLFNBQUEsU0FBQXBCLEVBQUFDLEdBQ0FILEVBQUFzQixTQUFBcEIsRUFBQUMsT0NIQVgsUUFBQUMsT0FBQSxPQUFBOEIsUUFBQSxpQkFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUVBRCxFQUFBRSxLQUFBLEtBQUFoQyxXQUFBLFlBQUFpQyxZQUFBLGVBQ0FILEVBQUFFLEtBQUEsYUFBQWhDLFdBQUEsZUFBQWlDLFlBQUEsa0JBQ0FILEVBQUFFLEtBQUEsVUFBQWhDLFdBQUEsWUFBQWlDLFlBQUEsZUFDQUYsRUFBQUcsV0FBQSxNQ0xBcEMsUUFBQUMsT0FBQSxPQUNBeUIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxJQUFBVSxFQUFBVCxLQUNBUyxFQUFBQyxRQUFBLFdBQ0EsT0FBQVgsRUFBQUUsSUFBQSxlQUVBUSxFQUFBNUIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFnQixFQUFBTCxLQUFBLGlCQUNBWixTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUEyQixHQUdBLE9BRkFGLEVBQUFHLE1BQUFELEVBQUF4QixLQUNBWSxFQUFBYyxTQUFBQyxRQUFBQyxPQUFBLFVBQUFKLEVBQUF4QixLQUNBc0IsRUFBQUMsYUFHQUQsRUFBQVAsU0FBQSxTQUFBcEIsRUFBQUMsR0FFQSxPQURBaUMsUUFBQUMsSUFBQW5DLEdBQ0FpQixFQUFBTCxLQUFBLGNBQ0FaLFNBQUFBLEVBQUFDLFNBQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLFtcclxuICAgICduZ1JvdXRlJ1xyXG5dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgICRzY29wZS4kb24oJ2xvZ2luJyxmdW5jdGlvbihfLHVzZXIpe1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XHJcbiAgICB9KVxyXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignTG9naW5DdHJsJyxmdW5jdGlvbigkc2NvcGUsVXNlclN2Yyl7XHJcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7XHJcbiAgICAgICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSxwYXNzd29yZClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLHJlc3BvbnNlLmRhdGEpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsZnVuY3Rpb24oJHNjb3BlLFBvc3RzU3ZjKXtcclxuICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBpZigkc2NvcGUucG9zdEJvZHkpe1xyXG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdraXNoYW4nLFxyXG4gICAgICAgICAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XHJcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdCl7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keT1udWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBQb3N0c1N2Yy5mZXRjaCgpLnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdHMpe1xyXG4gICAgICAgICRzY29wZS5wb3N0cz1wb3N0cztcclxuICAgIH0pO1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuc2VydmljZSgnUG9zdHNTdmMnLGZ1bmN0aW9uKCRodHRwKXtcclxuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxyXG4gICAgfVxyXG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KXtcclxuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycscG9zdCk7XHJcbiAgICB9XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJyxmdW5jdGlvbigkc2NvcGUsVXNlclN2Yyl7XHJcbiAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7XHJcbiAgICAgICAgVXNlclN2Yy5yZWdpc3Rlcih1c2VybmFtZSxwYXNzd29yZCk7XHJcbiAgICB9XHJcbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwkbG9jYXRpb25Qcm92aWRlcil7XHJcbiAgICBcclxuICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLHtjb250cm9sbGVyOidQb3N0c0N0cmwnLHRlbXBsYXRlVXJsOidwb3N0cy5odG1sJ30pO1xyXG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbignL3JlZ2lzdGVyJyx7Y29udHJvbGxlcjonUmVnaXN0ZXJDdHJsJyx0ZW1wbGF0ZVVybDoncmVnaXN0ZXIuaHRtbCd9KTtcclxuICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9sb2dpbicse2NvbnRyb2xsZXI6J0xvZ2luQ3RybCcsdGVtcGxhdGVVcmw6J2xvZ2luLmh0bWwnfSk7XHJcbiAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcbn0pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnVXNlclN2YycsZnVuY3Rpb24oJGh0dHApe1xyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcbiAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpO1xyXG4gICAgfVxyXG4gICAgc3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJyx7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbih2YWwpe1xyXG4gICAgICAgICAgICBzdmMudG9rZW4gPSB2YWwuZGF0YTtcclxuICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdmFsLmRhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7XHJcbiAgICAgICAgY29uc29sZS5sb2codXNlcm5hbWUpO1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJyx7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOnVzZXJuYW1lLHBhc3N3b3JkOnBhc3N3b3JkXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSkiXX0=
