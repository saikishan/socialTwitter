angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(t,o){t.$on("login",function(o,e){alert("got the user data"+e),t.currentUser=e}),t.logout=function(){t.currentUser=null,o.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,e){t.login=function(e,n){console.log("its loginfunction"),o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({username:"kishan",body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})},o.fetch().success(function(o){t.posts=o})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,o){t.register=function(t,e){o.register(t,e)}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){o.html5Mode({enabled:!0,requireBase:!1}),t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}),t.when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}),t.when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this,e=t.defaults.headers.common["X-Auth"];o.getUser=function(){return t.get("/api/users")},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.register=function(o,e){return t.post("/api/users",{username:o,password:e})},o.logout=function(){o.token=null,t.defaults.headers.common["X-Auth"]=e}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlVzZXJTdmMiLCIkb24iLCJfIiwidXNlciIsImFsZXJ0IiwiY3VycmVudFVzZXIiLCJsb2dvdXQiLCIkbG9jYXRpb24iLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJjb25zb2xlIiwibG9nIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJlbmFibGVkIiwicmVxdWlyZUJhc2UiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJkZWZhdWx0aCIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFDLEdBQ0FELEVBQUFFLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBQyxNQUFBLG9CQUFBRCxHQUNBSixFQUFBTSxZQUFBRixJQUVBSixFQUFBTyxPQUFBLFdBRUFQLEVBQUFNLFlBQUEsS0FDQUwsRUFBQU0sYUNUQVYsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQUMsRUFBQUMsRUFBQU8sR0FDQVIsRUFBQVMsTUFBQSxTQUFBQyxFQUFBQyxHQUNBQyxRQUFBQyxJQUFBLHFCQUNBWixFQUFBUSxNQUFBQyxFQUFBQyxHQUNBRyxLQUFBLFNBQUFDLEdBRUFmLEVBQUFnQixNQUFBLFFBQUFELEVBQUFFLFlDUEFwQixRQUFBQyxPQUFBLE9BQUFDLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQWtCLEdBQ0FsQixFQUFBbUIsUUFBQSxXQUNBbkIsRUFBQW9CLFVBQ0FGLEVBQUFHLFFBQ0FYLFNBQUEsU0FDQVksS0FBQXRCLEVBQUFvQixXQUNBRyxRQUFBLFNBQUFDLEdBQ0F4QixFQUFBeUIsTUFBQUMsUUFBQUYsR0FDQXhCLEVBQUFvQixTQUFBLFFBSUFGLEVBQUFTLFFBQUFKLFFBQUEsU0FBQUUsR0FDQXpCLEVBQUF5QixNQUFBQSxPQ2JBNUIsUUFBQUMsT0FBQSxPQUFBOEIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQUgsTUFBQSxXQUNBLE9BQUFFLEVBQUFFLElBQUEsZUFFQUQsS0FBQVQsT0FBQSxTQUFBRyxHQUNBLE9BQUFLLEVBQUFMLEtBQUEsYUFBQUEsT0NMQTNCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxnQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQWdDLFNBQUEsU0FBQXRCLEVBQUFDLEdBQ0FWLEVBQUErQixTQUFBdEIsRUFBQUMsT0NIQWQsUUFBQUMsT0FBQSxPQUFBbUMsUUFBQSxpQkFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxXQUNBQyxTQUFBLEVBQ0FDLGFBQUEsSUFFQUosRUFBQUssS0FBQSxLQUFBeEMsV0FBQSxZQUFBeUMsWUFBQSxlQUNBTixFQUFBSyxLQUFBLGFBQUF4QyxXQUFBLGVBQUF5QyxZQUFBLGtCQUNBTixFQUFBSyxLQUFBLFVBQUF4QyxXQUFBLFlBQUF5QyxZQUFBLGtCQ1BBM0MsUUFBQUMsT0FBQSxPQUNBOEIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxJQUFBWSxFQUFBWCxLQUNBWSxFQUFBYixFQUFBYyxTQUFBQyxRQUFBQyxPQUFBLFVBQ0FKLEVBQUFLLFFBQUEsV0FDQSxPQUFBakIsRUFBQUUsSUFBQSxlQUVBVSxFQUFBaEMsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFrQixFQUFBTCxLQUFBLGlCQUNBZCxTQUFBQSxFQUFBQyxTQUFBQSxJQUNBRyxLQUFBLFNBQUFpQyxHQUdBLE9BRkFOLEVBQUFPLE1BQUFELEVBQUE5QixLQUNBWSxFQUFBYyxTQUFBQyxRQUFBQyxPQUFBLFVBQUFFLEVBQUE5QixLQUNBd0IsRUFBQUssYUFHQUwsRUFBQVQsU0FBQSxTQUFBdEIsRUFBQUMsR0FDQSxPQUFBa0IsRUFBQUwsS0FBQSxjQUNBZCxTQUFBQSxFQUFBQyxTQUFBQSxLQUdBOEIsRUFBQWxDLE9BQUEsV0FDQWtDLEVBQUFPLE1BQUEsS0FDQW5CLEVBQUFjLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUgiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xyXG4gICAgJ25nUm91dGUnXHJcbl0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJyxmdW5jdGlvbigkc2NvcGUsVXNlclN2Yyl7XHJcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsZnVuY3Rpb24oXyx1c2VyKXtcclxuICAgICBhbGVydChcImdvdCB0aGUgdXNlciBkYXRhXCIrdXNlcik7XHJcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICAgIH0pXHJcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcclxuICAgICAvLyAgIGFsZXJ0KFwiaW5sb2dvdXRcIik7XHJcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyPW51bGw7XHJcbiAgICAgICAgVXNlclN2Yy5sb2dvdXQoKTtcclxuICAgIH1cclxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsZnVuY3Rpb24oJHNjb3BlLFVzZXJTdmMsJGxvY2F0aW9uKXtcclxuICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIml0cyBsb2dpbmZ1bmN0aW9uXCIpO1xyXG4gICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUscGFzc3dvcmQpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAvLyAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicscmVzcG9uc2UuZGF0YSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignUG9zdHNDdHJsJyxmdW5jdGlvbigkc2NvcGUsUG9zdHNTdmMpe1xyXG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGlmKCRzY29wZS5wb3N0Qm9keSl7XHJcbiAgICAgICAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ2tpc2hhbicsXHJcbiAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcclxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihwb3N0KXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RCb2R5PW51bGw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0cyl7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RzPXBvc3RzO1xyXG4gICAgfSk7XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5zZXJ2aWNlKCdQb3N0c1N2YycsZnVuY3Rpb24oJGh0dHApe1xyXG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXHJcbiAgICB9XHJcbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJyxwb3N0KTtcclxuICAgIH1cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLGZ1bmN0aW9uKCRzY29wZSxVc2VyU3ZjKXtcclxuICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuICAgICAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLHBhc3N3b3JkKTtcclxuICAgIH1cclxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCRsb2NhdGlvblByb3ZpZGVyKXtcclxuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICByZXF1aXJlQmFzZTogZmFsc2VcclxuICAgIH0pO1xyXG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbignLycse2NvbnRyb2xsZXI6J1Bvc3RzQ3RybCcsdGVtcGxhdGVVcmw6J3Bvc3RzLmh0bWwnfSk7XHJcbiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvcmVnaXN0ZXInLHtjb250cm9sbGVyOidSZWdpc3RlckN0cmwnLHRlbXBsYXRlVXJsOidyZWdpc3Rlci5odG1sJ30pO1xyXG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2xvZ2luJyx7Y29udHJvbGxlcjonTG9naW5DdHJsJyx0ZW1wbGF0ZVVybDonbG9naW4uaHRtbCd9KTtcclxufSlcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdVc2VyU3ZjJyxmdW5jdGlvbigkaHR0cCl7XHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuICAgIHZhciBkZWZhdWx0aCA9ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXTtcclxuICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XHJcbiAgICB9XHJcbiAgICBzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xyXG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycycse1xyXG4gICAgICAgICAgICB1c2VybmFtZTp1c2VybmFtZSxwYXNzd29yZDpwYXNzd29yZFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBzdmMubG9nb3V0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBzdmMudG9rZW4gPSBudWxsO1xyXG4gICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IGRlZmF1bHRoO1xyXG4gICAgfVxyXG59KSJdfQ==
